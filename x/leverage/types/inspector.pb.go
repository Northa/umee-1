// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/leverage/v1/inspector.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryInspect defines the request structure for the
// Inspect gRPC service handler.
type QueryInspect struct {
	// Flavor is a simple string which selects the logic behind the inspector query.
	Flavor string `protobuf:"bytes,1,opt,name=flavor,proto3" json:"flavor,omitempty"`
	// Symbol optionally selects a symbol denom for query flavors that allow one to be specified.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Value is the optional value parameter, usually a minimum value.
	Value github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"value"`
}

func (m *QueryInspect) Reset()         { *m = QueryInspect{} }
func (m *QueryInspect) String() string { return proto.CompactTextString(m) }
func (*QueryInspect) ProtoMessage()    {}
func (*QueryInspect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{0}
}
func (m *QueryInspect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInspect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInspect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInspect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInspect.Merge(m, src)
}
func (m *QueryInspect) XXX_Size() int {
	return m.Size()
}
func (m *QueryInspect) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInspect.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInspect proto.InternalMessageInfo

// QueryinspectResponse defines the response structure for the Inspect gRPC service handler.
type QueryInspectResponse struct {
	Borrowers []BorrowerSummary `protobuf:"bytes,1,rep,name=borrowers,proto3" json:"borrowers"`
}

func (m *QueryInspectResponse) Reset()         { *m = QueryInspectResponse{} }
func (m *QueryInspectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInspectResponse) ProtoMessage()    {}
func (*QueryInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{1}
}
func (m *QueryInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInspectResponse.Merge(m, src)
}
func (m *QueryInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInspectResponse proto.InternalMessageInfo

// BorrowerSummary defines a borrower's address and account health.
type BorrowerSummary struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Supplied Value is the sum of the USD value of all tokens the account has supplied, includng interest earned.
	SuppliedValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=supplied_value,json=suppliedValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"supplied_value"`
	// Collateral Value is the sum of the USD value of all uTokens the account has collateralized.
	CollateralValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=collateral_value,json=collateralValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateral_value"`
	// Borrowed Value is the sum of the USD value of all tokens the account has borrowed, including interest owed.
	BorrowedValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=borrowed_value,json=borrowedValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrowed_value"`
	// Borrow Limit is the maximum Borrowed Value the account is allowed to reach through direct borrowing.
	BorrowLimit github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=borrow_limit,json=borrowLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"borrow_limit"`
	// Liquidation Threshold is the Borrowed Value at which the account becomes eligible for liquidation.
	LiquidationThreshold github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=liquidation_threshold,json=liquidationThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_threshold"`
	// SpecificCollateralValue is the amount of Collateral Value which is the result of a specified collateral denom.
	SpecificCollateralValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=specific_collateral_value,json=specificCollateralValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"specific_collateral_value"`
	// SpecificBorrowValue is the amount of Borrowed Value which is the result of a specified borrowed denom.
	SpecificBorrowValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=specific_borrow_value,json=specificBorrowValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"specific_borrow_value"`
}

func (m *BorrowerSummary) Reset()         { *m = BorrowerSummary{} }
func (m *BorrowerSummary) String() string { return proto.CompactTextString(m) }
func (*BorrowerSummary) ProtoMessage()    {}
func (*BorrowerSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28247c0efa3108d, []int{2}
}
func (m *BorrowerSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowerSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowerSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowerSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowerSummary.Merge(m, src)
}
func (m *BorrowerSummary) XXX_Size() int {
	return m.Size()
}
func (m *BorrowerSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowerSummary.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowerSummary proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryInspect)(nil), "umee.leverage.v1.QueryInspect")
	proto.RegisterType((*QueryInspectResponse)(nil), "umee.leverage.v1.QueryInspectResponse")
	proto.RegisterType((*BorrowerSummary)(nil), "umee.leverage.v1.BorrowerSummary")
}

func init() { proto.RegisterFile("umee/leverage/v1/inspector.proto", fileDescriptor_e28247c0efa3108d) }

var fileDescriptor_e28247c0efa3108d = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xed, 0x36, 0x49, 0xe9, 0xb6, 0xb4, 0x95, 0x49, 0xc1, 0x70, 0x70, 0x42, 0x0e, 0xa8,
	0x97, 0xda, 0x14, 0x38, 0x71, 0x0c, 0xe5, 0x80, 0x84, 0x90, 0x1a, 0x28, 0x12, 0x48, 0xc8, 0xf2,
	0x9f, 0x69, 0xb2, 0x74, 0x9d, 0x31, 0xbb, 0x6b, 0x97, 0xdc, 0x79, 0x00, 0x1e, 0x81, 0x67, 0xe1,
	0x94, 0x63, 0x8f, 0x88, 0x43, 0x05, 0xc9, 0x85, 0xc7, 0x40, 0xeb, 0xb5, 0x49, 0x14, 0x6e, 0xee,
	0xc9, 0x9e, 0xf1, 0xec, 0xef, 0x9b, 0x6f, 0xb4, 0x1e, 0xd2, 0xcd, 0x12, 0x00, 0x8f, 0x41, 0x0e,
	0x3c, 0x18, 0x82, 0x97, 0x1f, 0x79, 0x74, 0x2c, 0x52, 0x88, 0x24, 0x72, 0x37, 0xe5, 0x28, 0xd1,
	0xda, 0x53, 0x15, 0x6e, 0x55, 0xe1, 0xe6, 0x47, 0xf7, 0xda, 0x43, 0x1c, 0x62, 0xf1, 0xd1, 0x53,
	0x6f, 0xba, 0xae, 0xf7, 0xc5, 0x24, 0xdb, 0x27, 0x19, 0xf0, 0xc9, 0x0b, 0x0d, 0xb0, 0x6e, 0x93,
	0xd6, 0x19, 0x0b, 0x72, 0xe4, 0xb6, 0xd9, 0x35, 0x0f, 0x36, 0x07, 0x65, 0xa4, 0xf2, 0x62, 0x92,
	0x84, 0xc8, 0xec, 0x35, 0x9d, 0xd7, 0x91, 0x75, 0x4c, 0x9a, 0x79, 0xc0, 0x32, 0xb0, 0xd7, 0x55,
	0xba, 0xef, 0x4e, 0xaf, 0x3a, 0xc6, 0xcf, 0xab, 0xce, 0x83, 0x21, 0x95, 0xa3, 0x2c, 0x74, 0x23,
	0x4c, 0xbc, 0x08, 0x45, 0x82, 0xa2, 0x7c, 0x1c, 0x8a, 0xf8, 0xdc, 0x93, 0x93, 0x14, 0x84, 0x7b,
	0x0c, 0xd1, 0x40, 0x1f, 0xee, 0x7d, 0x20, 0xed, 0xe5, 0x2e, 0x06, 0x20, 0x52, 0x1c, 0x0b, 0xb0,
	0x9e, 0x93, 0xcd, 0x10, 0x39, 0xc7, 0x0b, 0xe0, 0xc2, 0x36, 0xbb, 0xeb, 0x07, 0x5b, 0x8f, 0xee,
	0xbb, 0xab, 0xd6, 0xdc, 0x7e, 0x59, 0xf2, 0x3a, 0x4b, 0x92, 0x80, 0x4f, 0xfa, 0x0d, 0xd5, 0xc4,
	0x60, 0x71, 0xb2, 0xf7, 0xbd, 0x49, 0x76, 0x57, 0x8a, 0x2c, 0x9b, 0x6c, 0x04, 0x71, 0xcc, 0x41,
	0x88, 0xd2, 0x69, 0x15, 0x5a, 0xa7, 0x64, 0x47, 0x64, 0x69, 0xca, 0x28, 0xc4, 0xbe, 0xf6, 0xb6,
	0x56, 0xcb, 0xdb, 0xcd, 0x8a, 0xf2, 0x56, 0x41, 0xac, 0x77, 0x64, 0x2f, 0x42, 0xc6, 0x02, 0x09,
	0x3c, 0x60, 0xfe, 0x75, 0x86, 0xb6, 0xbb, 0xe0, 0x68, 0xf4, 0x29, 0xd9, 0x29, 0xcd, 0x56, 0x1d,
	0x37, 0xea, 0x75, 0x5c, 0x51, 0x34, 0xf6, 0x84, 0x6c, 0xeb, 0x84, 0xcf, 0x68, 0x42, 0xa5, 0xdd,
	0xac, 0x05, 0xdd, 0xd2, 0x8c, 0x97, 0x0a, 0x61, 0x45, 0x64, 0x9f, 0xd1, 0x4f, 0x19, 0x8d, 0x03,
	0x49, 0x71, 0xec, 0xcb, 0x11, 0x07, 0x31, 0x42, 0x16, 0xdb, 0xad, 0x5a, 0xec, 0xf6, 0x12, 0xec,
	0x4d, 0xc5, 0xb2, 0x3e, 0x92, 0xbb, 0xea, 0x1a, 0xd1, 0x33, 0x1a, 0xf9, 0xff, 0x8d, 0x7c, 0xa3,
	0x96, 0xd0, 0x9d, 0x0a, 0xf8, 0x6c, 0x65, 0xf4, 0x21, 0xd9, 0xff, 0xa7, 0x55, 0x0e, 0x4b, 0xeb,
	0xdc, 0xa8, 0xa5, 0x73, 0xab, 0x82, 0xe9, 0xeb, 0x5a, 0x68, 0x3c, 0x6d, 0xfc, 0xf9, 0xd6, 0x31,
	0xfb, 0xaf, 0xa6, 0xbf, 0x1d, 0x63, 0x3a, 0x73, 0xcc, 0xcb, 0x99, 0x63, 0xfe, 0x9a, 0x39, 0xe6,
	0xd7, 0xb9, 0x63, 0x5c, 0xce, 0x1d, 0xe3, 0xc7, 0xdc, 0x31, 0xde, 0x3f, 0x5c, 0x12, 0x50, 0x3f,
	0xc8, 0xe1, 0x18, 0xe4, 0x05, 0xf2, 0xf3, 0x22, 0xf0, 0xf2, 0x27, 0xde, 0xe7, 0xc5, 0xbe, 0x28,
	0xe4, 0xc2, 0x56, 0xb1, 0x01, 0x1e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x81, 0x1f, 0x61,
	0x4d, 0x04, 0x00, 0x00,
}

func (this *BorrowerSummary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BorrowerSummary)
	if !ok {
		that2, ok := that.(BorrowerSummary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.SuppliedValue.Equal(that1.SuppliedValue) {
		return false
	}
	if !this.CollateralValue.Equal(that1.CollateralValue) {
		return false
	}
	if !this.BorrowedValue.Equal(that1.BorrowedValue) {
		return false
	}
	if !this.BorrowLimit.Equal(that1.BorrowLimit) {
		return false
	}
	if !this.LiquidationThreshold.Equal(that1.LiquidationThreshold) {
		return false
	}
	if !this.SpecificCollateralValue.Equal(that1.SpecificCollateralValue) {
		return false
	}
	if !this.SpecificBorrowValue.Equal(that1.SpecificBorrowValue) {
		return false
	}
	return true
}
func (m *QueryInspect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInspect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInspect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Flavor) > 0 {
		i -= len(m.Flavor)
		copy(dAtA[i:], m.Flavor)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Flavor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Borrowers) > 0 {
		for iNdEx := len(m.Borrowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInspector(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BorrowerSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowerSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowerSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SpecificBorrowValue.Size()
		i -= size
		if _, err := m.SpecificBorrowValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.SpecificCollateralValue.Size()
		i -= size
		if _, err := m.SpecificCollateralValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.LiquidationThreshold.Size()
		i -= size
		if _, err := m.LiquidationThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BorrowLimit.Size()
		i -= size
		if _, err := m.BorrowLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BorrowedValue.Size()
		i -= size
		if _, err := m.BorrowedValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollateralValue.Size()
		i -= size
		if _, err := m.CollateralValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SuppliedValue.Size()
		i -= size
		if _, err := m.SuppliedValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInspector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInspector(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInspector(dAtA []byte, offset int, v uint64) int {
	offset -= sovInspector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInspect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Flavor)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovInspector(uint64(l))
	return n
}

func (m *QueryInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Borrowers) > 0 {
		for _, e := range m.Borrowers {
			l = e.Size()
			n += 1 + l + sovInspector(uint64(l))
		}
	}
	return n
}

func (m *BorrowerSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInspector(uint64(l))
	}
	l = m.SuppliedValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.CollateralValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.BorrowedValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.BorrowLimit.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.LiquidationThreshold.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.SpecificCollateralValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	l = m.SpecificBorrowValue.Size()
	n += 1 + l + sovInspector(uint64(l))
	return n
}

func sovInspector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInspector(x uint64) (n int) {
	return sovInspector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInspect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInspect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInspect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrowers = append(m.Borrowers, BorrowerSummary{})
			if err := m.Borrowers[len(m.Borrowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowerSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowerSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowerSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuppliedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuppliedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificCollateralValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificCollateralValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificBorrowValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecificBorrowValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInspector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInspector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInspector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInspector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInspector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInspector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInspector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInspector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInspector = fmt.Errorf("proto: unexpected end of group")
)
