// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/incentive/v1/incentive.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the incentive module.
type Params struct {
	// Max_unbondings defines the maximum amount of concurrent unbondings an address can have.
	MaxUnbondings uint32 `protobuf:"varint,1,opt,name=max_unbondings,json=maxUnbondings,proto3" json:"max_unbondings,omitempty" yaml:"max_unbondings"`
	// Unbonding_period defines the duration in blocks which tokens are locked.
	UnbondingPeriod uint64 `protobuf:"varint,2,opt,name=unbonding_period,json=unbondingPeriod,proto3" json:"unbonding_period,omitempty" yaml:"unbonding_period"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c99c623956e199b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxUnbondings() uint32 {
	if m != nil {
		return m.MaxUnbondings
	}
	return 0
}

func (m *Params) GetUnbondingPeriod() uint64 {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

// IncentiveProgram defines a liquidity mining program on a single
// token that will run for a set amount of time.
type IncentiveProgram struct {
	// ID uniquely identifies the incentive program after it has been created.
	// Incentive programs not yet passed by governance have an ID of zero.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Supply_denom defines the incentivized token. Users who supply and lock
	// the uToken associated with this base token are eligible for rewards.
	SupplyDenom string `protobuf:"bytes,2,opt,name=supply_denom,json=supplyDenom,proto3" json:"supply_denom,omitempty" yaml:"supply_denom"`
	// Total_incentive tracks the remaining reward tokens in an incentive program.
	// Incentive programs not yet passed by governance display proposed rewards over their duration.
	TotalIncentive types.Coin `protobuf:"bytes,3,opt,name=total_incentive,json=totalIncentive,proto3" json:"total_incentive"`
	// Start_height is the block height at which the incentive program begins.
	StartHeight uint64 `protobuf:"varint,4,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty" yaml:"start_date"`
	// Duration is the length of the incentive program in blocks.
	Duration uint64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *IncentiveProgram) Reset()         { *m = IncentiveProgram{} }
func (m *IncentiveProgram) String() string { return proto.CompactTextString(m) }
func (*IncentiveProgram) ProtoMessage()    {}
func (*IncentiveProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c99c623956e199b, []int{1}
}
func (m *IncentiveProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveProgram.Merge(m, src)
}
func (m *IncentiveProgram) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveProgram.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveProgram proto.InternalMessageInfo

func (m *IncentiveProgram) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IncentiveProgram) GetSupplyDenom() string {
	if m != nil {
		return m.SupplyDenom
	}
	return ""
}

func (m *IncentiveProgram) GetTotalIncentive() types.Coin {
	if m != nil {
		return m.TotalIncentive
	}
	return types.Coin{}
}

func (m *IncentiveProgram) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *IncentiveProgram) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "umeenetwork.umee.incentive.v1.Params")
	proto.RegisterType((*IncentiveProgram)(nil), "umeenetwork.umee.incentive.v1.IncentiveProgram")
}

func init() { proto.RegisterFile("umee/incentive/v1/incentive.proto", fileDescriptor_8c99c623956e199b) }

var fileDescriptor_8c99c623956e199b = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x86, 0x50, 0xc1, 0xb6, 0x4d, 0x8b, 0xa1, 0xaa, 0x1b, 0x84, 0x1d, 0x7c, 0xca, 0x05,
	0x5b, 0xa1, 0x17, 0xd4, 0x13, 0x32, 0x08, 0x15, 0x71, 0x89, 0x2c, 0x71, 0xe1, 0x62, 0xad, 0xe3,
	0x95, 0xb3, 0x22, 0xbb, 0x63, 0x79, 0xd7, 0x21, 0xf9, 0x0b, 0xc4, 0x57, 0xf5, 0xd8, 0x23, 0x27,
	0x0b, 0x25, 0x7f, 0xe0, 0x0f, 0x40, 0x68, 0x77, 0x83, 0x5b, 0xb8, 0xcd, 0x9b, 0x79, 0xcf, 0xfb,
	0xe6, 0x79, 0xf0, 0xcb, 0x9a, 0x53, 0x1a, 0x31, 0x31, 0xa7, 0x42, 0xb1, 0x15, 0x8d, 0x56, 0xd3,
	0x3b, 0x10, 0x96, 0x15, 0x28, 0x70, 0x5e, 0x68, 0x8a, 0xa0, 0xea, 0x1b, 0x54, 0x5f, 0x43, 0x5d,
	0x87, 0x77, 0x8c, 0xd5, 0x74, 0xe4, 0xcd, 0x41, 0x72, 0x90, 0x51, 0x46, 0xa4, 0x96, 0x67, 0x54,
	0x91, 0x69, 0x34, 0x07, 0x26, 0xac, 0x7c, 0xf4, 0xac, 0x80, 0x02, 0x4c, 0x19, 0xe9, 0xca, 0x76,
	0x83, 0x1f, 0x08, 0x1f, 0xcc, 0x48, 0x45, 0xb8, 0x74, 0xde, 0xe2, 0x21, 0x27, 0xeb, 0xb4, 0x16,
	0x19, 0x88, 0x9c, 0x89, 0x42, 0xba, 0x68, 0x8c, 0x26, 0xc7, 0xf1, 0x45, 0xdb, 0xf8, 0x67, 0x1b,
	0xc2, 0x97, 0x57, 0xc1, 0xbf, 0xf3, 0x20, 0x39, 0xe6, 0x64, 0xfd, 0xb9, 0xc3, 0xce, 0x07, 0x7c,
	0xda, 0x4d, 0xd3, 0x92, 0x56, 0x0c, 0x72, 0xb7, 0x3f, 0x46, 0x93, 0x41, 0xfc, 0xbc, 0x6d, 0xfc,
	0x73, 0xfb, 0x8d, 0xff, 0x19, 0x41, 0x72, 0xd2, 0xb5, 0x66, 0xb6, 0xf3, 0x1b, 0xe1, 0xd3, 0x8f,
	0x7f, 0x77, 0x9b, 0x55, 0x50, 0x54, 0x84, 0x3b, 0x43, 0xdc, 0x67, 0xb9, 0xb5, 0x94, 0xf4, 0x59,
	0xee, 0x5c, 0xe1, 0x23, 0x59, 0x97, 0xe5, 0x72, 0x93, 0xe6, 0x54, 0x00, 0x37, 0x0f, 0x3d, 0x8e,
	0xcf, 0xdb, 0xc6, 0x7f, 0x6a, 0x1f, 0xba, 0x3f, 0x0d, 0x92, 0x43, 0x0b, 0xdf, 0x6b, 0xe4, 0x5c,
	0xe3, 0x13, 0x05, 0x8a, 0x2c, 0xd3, 0x2e, 0x41, 0xf7, 0xc1, 0x18, 0x4d, 0x0e, 0x5f, 0x5f, 0x84,
	0x36, 0xc5, 0x50, 0xa7, 0x18, 0xee, 0x53, 0x0c, 0xdf, 0x01, 0x13, 0xf1, 0xe0, 0xa6, 0xf1, 0x7b,
	0xc9, 0xd0, 0xe8, 0x3a, 0x73, 0xce, 0x1b, 0x7c, 0x24, 0x15, 0xa9, 0x54, 0xba, 0xa0, 0xac, 0x58,
	0x28, 0x77, 0x60, 0xd6, 0x3d, 0x6b, 0x1b, 0xff, 0xc9, 0xde, 0x85, 0x99, 0xe6, 0x44, 0x51, 0xed,
	0x41, 0x83, 0x6b, 0xc3, 0x74, 0x46, 0xf8, 0x51, 0x5e, 0x57, 0x44, 0x31, 0x10, 0xee, 0x43, 0xad,
	0x4a, 0x3a, 0x1c, 0x7f, 0xba, 0xd9, 0x7a, 0xe8, 0x76, 0xeb, 0xa1, 0x5f, 0x5b, 0x0f, 0x7d, 0xdf,
	0x79, 0xbd, 0xdb, 0x9d, 0xd7, 0xfb, 0xb9, 0xf3, 0x7a, 0x5f, 0xa6, 0x05, 0x53, 0x8b, 0x3a, 0x0b,
	0xe7, 0xc0, 0x23, 0x7d, 0x03, 0xaf, 0xf6, 0x07, 0x61, 0x40, 0xb4, 0xba, 0x8c, 0xd6, 0xf7, 0x8e,
	0x48, 0x6d, 0x4a, 0x2a, 0xb3, 0x03, 0xf3, 0xa7, 0x2f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1d,
	0xde, 0xa3, 0x55, 0x63, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingPeriod != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.UnbondingPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxUnbondings != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MaxUnbondings))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.StartHeight != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TotalIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SupplyDenom) > 0 {
		i -= len(m.SupplyDenom)
		copy(dAtA[i:], m.SupplyDenom)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.SupplyDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxUnbondings != 0 {
		n += 1 + sovIncentive(uint64(m.MaxUnbondings))
	}
	if m.UnbondingPeriod != 0 {
		n += 1 + sovIncentive(uint64(m.UnbondingPeriod))
	}
	return n
}

func (m *IncentiveProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIncentive(uint64(m.Id))
	}
	l = len(m.SupplyDenom)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	l = m.TotalIncentive.Size()
	n += 1 + l + sovIncentive(uint64(l))
	if m.StartHeight != 0 {
		n += 1 + sovIncentive(uint64(m.StartHeight))
	}
	if m.Duration != 0 {
		n += 1 + sovIncentive(uint64(m.Duration))
	}
	return n
}

func sovIncentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentive(x uint64) (n int) {
	return sovIncentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnbondings", wireType)
			}
			m.MaxUnbondings = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnbondings |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			m.UnbondingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentive = fmt.Errorf("proto: unexpected end of group")
)
